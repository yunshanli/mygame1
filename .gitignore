
import pygame
import random 
import os


FPS=70 
WIDTH=500
HEIGHT=600                   #(0,0)在左上角,往右有500,往下有600

BLUE=(176,196,222)               #填入(紅,綠,藍)
GREEN=(95,158,160)
BROWN=(139,105,20)
GRAY=(54,54,54)
BLACK=(0,0,0)
WHITE=(248,248,255)
RED=(200,0,0)


#遊戲初始化與創建視窗
pygame.init()
pygame.mixer.init()
screen = pygame.display.set_mode((WIDTH,HEIGHT))
pygame.display.set_caption("game")
clock =pygame.time.Clock()
score=0  


#載入圖片                                      #找到圖片位置
background_img = pygame.image.load(os.path.join("img", "background.png")).convert()
player_img = pygame.image.load(os.path.join("img", "player.png")).convert()
lives_img = pygame.image.load(os.path.join("img", "lives.png")).convert()
lives_img.set_colorkey(BLACK)
player_lives_img = pygame.transform.scale(lives_img, (25,24))     #設生命的圖片
#rock_img = pygame.image.load(os.path.join("img","rock.png")).convert()
bullet_img = pygame.image.load(os.path.join("img", "bullet.png")).convert()

rock_imgs=[]          #列表
for i in range (7):
    rock_imgs.append(pygame.image.load(os.path.join("img", f"rock{i}.png")).convert())

expl_anim = {}                    #字典
expl_anim['lar'] = []             #列表，大爆炸
expl_anim['sm'] = []              #列表，小爆炸
expl_anim['player'] = []          #飛船的爆炸
for i in range(9):                # 有九張照片
    expl_img = pygame.image.load(os.path.join("img", f"expl{i}.png")).convert()               #載入爆炸圖片
    expl_img.set_colorkey(BLACK)
    expl_anim['lar'].append(pygame.transform.scale(expl_img, (75, 75)))     #調整圖片大小
    expl_anim['sm'].append(pygame.transform.scale(expl_img, (30, 30)))
    player_expl_img = pygame.image.load(os.path.join("img", f"player_expl{i}.png")).convert()  #載入飛船爆炸圖片
    player_expl_img.set_colorkey(BLACK)
    expl_anim['player'].append(player_expl_img)   

power_imgs = {}
power_imgs ['shield'] = pygame.image.load(os.path.join("img", "shield.png")).convert()
power_imgs ['shield'].set_colorkey(BLACK)
power_imgs ['gun'] = pygame.image.load(os.path.join("img", "gun.png")).convert()
power_imgs ['gun'].set_colorkey(BLACK)

#載入音樂                                     #找到音樂位置
shoot_sound = pygame.mixer.Sound(os.path.join("music", "shoot.wav"))
gun_sound = pygame.mixer.Sound(os.path.join("music", "pow0.wav"))
shield_sound = pygame.mixer.Sound(os.path.join("music", "pow1.wav"))
die_sound = pygame.mixer.Sound(os.path.join("music", "rumble.ogg"))         #載入飛船死掉音效
expl_sounds = [                                                               #爆炸的聲音選一種
    pygame.mixer.Sound(os.path.join("music", "expl0.wav")),
    pygame.mixer.Sound(os.path.join("music", "expl1.wav")) 
]
pygame.mixer.music.load(os.path.join("music", "background.ogg"))                        #要一直播(寫法不同)
pygame.mixer.music.set_volume(0.3)                                                      #填入0-1表聲音大小

font_name = (os.path.join("font.ttf"))      # 字體
def draw_text(surf,text,size,x,y):              #定義出分數
    font = pygame.font.Font(font_name, size)
    text_surface = font.render(text, True, WHITE)
    text_rect = text_surface.get_rect()
    text_rect.centerx = x
    text_rect.top = y
    surf.blit(text_surface, text_rect)   #畫出來

def new_rock() :                                #把石頭加回來(重複太多次，直接設一個函式)
    r = Rock()
    all_sprites.add(r)
    rocks.add(r)

def draw_health(surf, hp, x, y):                #畫出血量
    if hp <0:
        hp=0
    BAR_LENGTH =100
    BAR_HEIGHT =10
    fill = (hp/100)*BAR_LENGTH
    outline_rect =pygame.Rect(x, y, BAR_LENGTH, BAR_HEIGHT)
    fill_rect =pygame.Rect(x, y, fill, BAR_HEIGHT)
    pygame.draw.rect(surf, RED, fill_rect)
    pygame.draw.rect(surf, WHITE, outline_rect, 2)                            #最後一格是像素

def draw_lives(surf, lives, img, x, y) :
    for i in range(lives) :
        img_rect = img.get_rect()
        img_rect.x = x + 32*i                   #每隔一段距離畫一個
        img_rect.y = y
        surf.blit(img, img_rect)

def draw_init () :
    screen.blit (background_img,(0,0))
    draw_text(screen, '太空生存戰', 80, WIDTH/2, HEIGHT/4)
    draw_text(screen, '← →控制飛船 空白鍵發射子彈', 20, WIDTH/2, HEIGHT*9/16)
    draw_text(screen, '盾牌補血 閃電增加子彈數', 20, WIDTH/2, HEIGHT*39/64)
    draw_text(screen, '按任意鍵開始遊戲!', 17, WIDTH/2, HEIGHT*3/4)
    pygame.display.update()
    waiting = True
    while waiting:
        clock.tick(FPS)
        # 取得輸入
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                return True
            elif event.type == pygame.KEYDOWN:
                waiting = False
                return False



class Player(pygame.sprite.Sprite) : 
    def __init__(self) :
        pygame.sprite.Sprite.__init__(self) 
        #self.image =pygame.Surface((50,40))
        #self.image.fill(BLUE)                      #圖片
        self.image = pygame.transform.scale(player_img,  (50,38))  #照片要多大
        self.image.set_colorkey(BLACK)                   #把某色變透明
        self.rect = self.image.get_rect()          #定位圖片
        self.radius=21                             #半徑25
        #pygame.draw.circle(self.image, RED, self.rect.center, self.radius)   #畫出圓形(地點,顏色,原心點,半徑)
        self.rect.centerx = WIDTH/2
        self.rect.bottom = HEIGHT -10
        self.speedx = 8
        self.health = 100
        self.lives = 3
        self.hidden = False
        self.hide_time = 0
        self.gun = 1
        self.gun_time = 0


    def update(self):
        now = pygame.time.get_ticks()
        if self.gun > 1 and now - self.gun_time > 5000:
            self.gun -= 1
            self.gun_time = now

        if self.hidden and pygame.time.get_ticks() - self.hide_time > 1000 :   #判斷隱藏時間並回位
            self.hidden = False
            self.rect.centerx = WIDTH/2
            self.rect.bottom = HEIGHT -10
        key_pressed = pygame.key.get_pressed()      #此函數會回傳布林值
        #self.rect.x += 2                           # 一直往右加2
        #if self.rect.left > WIDTH :                #判斷是否超出邊框
            #self.rect.right =0                     #如果超出去就回到最左邊
        if key_pressed[pygame.K_RIGHT]:
            self.rect.x += 2                # 往右加2
        if key_pressed[pygame.K_LEFT]:
            self.rect.x -= 2                # 往左加2
        if self.rect.left < 0 :                
           self.rect.left = 0   
        if self.rect.right > WIDTH :                
           self.rect.right = WIDTH    


    def shoot(self):
        if not(self.hidden) :
            if self.gun == 1:
                bullet = Bullet(self.rect.centerx , self.rect.top)
                all_sprites.add(bullet)
                bullets.add(bullet)                 #將子彈放進群組
                shoot_sound.play()                  #發出音效
            elif self.gun >= 2:
                bullet1 = Bullet(self.rect.left , self.rect.centery)
                bullet2 = Bullet(self.rect.right , self.rect.centery)
                all_sprites.add(bullet1)
                all_sprites.add(bullet2)
                bullets.add(bullet1)  
                bullets.add(bullet2)                
                shoot_sound.play()     

    def hide(self):
        self.hidden = True
        self.hide_time = pygame.time.get_ticks()             #死亡與復活的緩衝時間
        self.rect.center = (WIDTH/2, HEIGHT+500)             #把飛船定位到視窗外就看不到

    def gunup(self) :
        self.gun += 1
        self.gun_time = pygame.time.get_ticks()



class Rock(pygame.sprite.Sprite) :
    def __init__(self) :
        pygame.sprite.Sprite.__init__(self) 
        #self.image =pygame.Surface((30,40))
        #self.image.fill(BROWN)   
        self.image_ori = random.choice (rock_imgs)               #本來的圖片
        self.image_ori.set_colorkey(BLACK)
        self.image = self.image_ori.copy()               
        self.rect = self.image.get_rect()  
        self.radius = int(self.rect.width / 2.2)         #半徑                
        #pygame.draw.circle(self.image, RED, self.rect.center, self.radius)        
        self.rect.x = random.randrange(0,WIDTH-self.rect.width)
        self.rect.y = random.randrange(-100,-40)
        self.speedy = random.randrange(2,8)
        self.speedx = random.randrange(-2,2)
        self.toatl_degree = 0            #一開始0度
        self.rot_degree = random.randrange(-2,2)            #轉?(任意)度      

    def rotate(self) :                     #定義函數rotate
        self.toatl_degree += self.rot_degree                 #每次都加3.5     
        self.toatl_degree = self.toatl_degree % 360          #轉超過一圈沒意義       
        self.image = pygame.transform.rotate(self.image_ori, self.rot_degree)     #每次的轉動都是原始圖片轉
        center = self.rect.center                #重新定位框
        self.rect = self.image.get_rect()
        self.rect.center = center

    def update(self):                      #改變速度與位置  #超出去就消失
       self.rotate()                           #旋轉
       self.rect.y +=  self.speedy
       self.rect.x +=  self.speedx               #超出底/左/右就重置 
       if self.rect.top > HEIGHT or self.rect.left >WIDTH or self.rect.right <0 :
            self.rect.x = random.randrange(0,WIDTH-self.rect.width)
            self.rect.y = random.randrange(-100,-40)
            self.speedy = random.randrange(2,8)
            self.speedx = random.randrange(-3,4)

class Bullet(pygame.sprite.Sprite) :  
    def __init__(self,x,y) :
        pygame.sprite.Sprite.__init__(self) 
        #self.image =pygame.Surface((10,20))
        #self.image.fill(GRAY)         
        self.image =bullet_img
        bullet_img.set_colorkey(BLACK )             
        self.rect = self.image.get_rect()         
        self.rect.centerx = x
        self.rect.bottom = y
        self.speedy = -10


    def update(self):
       self.rect.y +=  self.speedy
       if self.rect.bottom < 0 :
             self.kill()

class Explosion(pygame.sprite.Sprite) :  
    def __init__(self, center, size) :
        pygame.sprite.Sprite.__init__(self)   
        self.size = size      
        self.image = expl_anim[self.size][0]         
        self.rect = self.image.get_rect()         
        self.rect.center = center
        self.frame = 0                                #更新到第幾張圖片
        self.last_update = pygame.time.get_ticks()    #記下最後更新的時間，為了判斷是不是過了50毫秒
        self.frame_rate = 45                          #爆炸動畫的速度，不和遊戲更新時長一樣

    def update(self):
       now = pygame.time.get_ticks()
       if now - self.last_update > self.frame_rate :   #判斷是不是過了50毫秒
           self.last_update = now
           self.frame += 1
           if self.frame == len(expl_anim[self.size]) :
                self.kill()
           else:
               self.image = expl_anim[self.size][self.frame] 
               center = self.rect.center
               self.rect = self.image.get_rect()
               self.rect.center = center

class Power(pygame.sprite.Sprite) :  
    def __init__(self,center) :
        pygame.sprite.Sprite.__init__(self) 
        self.type = random.choice(['shield', 'gun'])        
        self.image =power_imgs[self.type]
        bullet_img.set_colorkey(BLACK )             
        self.rect = self.image.get_rect()         
        self.rect.center = center
        self.speedy = 3

    def update(self):
       self.rect.y +=  self.speedy
       if self.rect.top > HEIGHT :
             self.kill()


pygame.mixer.music.play(-1)                   #要播幾次  #-1表無限播放 

#遊戲迴圈
show_init = True
running = True

while running:
    if show_init :
        close = draw_init()
        if close :
            break
        show_init = False
        all_sprites = pygame.sprite.Group()
        rocks = pygame.sprite.Group()                #創建石頭之群組
        bullets = pygame.sprite.Group()              #創建子彈之群組
        powers = pygame.sprite.Group()               #創建寶物群組
        player = Player()
        all_sprites.add(player)
        for i in range(7) :                           #共七顆石頭
            new_rock()                              #將石頭放進群組
        score=0

    clock.tick(FPS)                           #一秒內最多被執行幾次
    #取得輸入
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN :
            if event.key == pygame.K_SPACE:
                player.shoot()

    #更新遊戲 
    all_sprites.update()
    hits = pygame.sprite.groupcollide(rocks ,bullets ,True ,True)     #撞到都要刪掉
    for hit in hits :                        #放音效、加分、把被刪掉的石頭補回來  (子彈不用補)
        random.choice(expl_sounds).play()    #選一個音效
        score += hit.radius
        expl = Explosion(hit.rect.center , 'lar')
        all_sprites.add(expl)
        if random.random () > 0.9 :                             #隨機回傳一個數值(數值影響發生機率)
            pow = Power(hit.rect.center)
            all_sprites.add(pow)
            powers.add(pow)
        new_rock()

    #判斷石頭與飛船相撞
    hits = pygame.sprite.spritecollide(player ,rocks ,True,pygame.sprite.collide_circle)    #預設為舉行判斷,要換成圓形判斷必較準   
    for hit in hits :                                         #船撞到石頭先不用結束
        new_rock()                                            #把石頭加回來
        player.health -= hit.radius                           #判斷撞到的石頭大小來扣血
        expl = Explosion(hit.rect.center , 'sm')
        all_sprites.add(expl)
        if player.health <=0:                                 #沒血了就關掉遊戲
            death_expl = Explosion(player.rect.center , 'player')
            all_sprites.add(death_expl)
            die_sound.play()
            player.lives -= 1                                  #扣一條命
            player.health = 100                                #回血
            player.hide()
            #running = False

   #判斷寶物與飛船相撞
    hits = pygame.sprite.spritecollide(player ,powers ,True) 
    for hit in hits :
        if hit.type =='shield' :                           #如果碰到盾牌就回血
            player.health += 15
            if player.health >= 100:                       #血量不能超過100
                player.health = 100 
            shield_sound.play()
        elif hit.type =='gun' :                           #如果碰到閃電就增加子彈
            player.gunup ()
            gun_sound.play()

    if player.lives == 0 and not(death_expl.alive()):                                  #判斷是不是沒命了
        show_init = True


    #畫面顯示
    screen.fill(GREEN)
    screen.blit (background_img,(0,0))
    background_img = pygame.transform.scale(background_img,  (500,800))
    all_sprites.draw(screen)   
    draw_text(screen, str(score), 18, WIDTH/2, 10)
    draw_health(screen, player.health, 10 ,20)
    draw_lives(screen, player.lives, player_lives_img, WIDTH-100, 15)
    pygame.display.update()

pygame.quit()
